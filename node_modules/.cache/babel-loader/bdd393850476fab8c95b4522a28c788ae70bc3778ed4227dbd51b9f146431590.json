{"ast":null,"code":"var _jsxFileName = \"E:\\\\Masters\\\\Semester 2\\\\MUI\\\\Programming Exercise\\\\Minesweeper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GRID_SIZE = 10;\nconst MINE_COUNT = 10;\nconst generateGrid = () => {\n  let grid = Array(GRID_SIZE).fill().map(() => Array(GRID_SIZE).fill({\n    mine: false,\n    revealed: false,\n    flagged: false,\n    adjacent: 0\n  }));\n  let minesPlaced = 0;\n  while (minesPlaced < MINE_COUNT) {\n    let row = Math.floor(Math.random() * GRID_SIZE);\n    let col = Math.floor(Math.random() * GRID_SIZE);\n    if (!grid[row][col].mine) {\n      grid[row][col] = {\n        ...grid[row][col],\n        mine: true\n      };\n      minesPlaced++;\n    }\n  }\n  return calculateAdjacency(grid);\n};\nconst calculateAdjacency = grid => {\n  const directions = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n  return grid.map((row, rIdx) => row.map((cell, cIdx) => {\n    if (cell.mine) return cell;\n    let count = 0;\n    directions.forEach(([dx, dy]) => {\n      const nr = rIdx + dx;\n      const nc = cIdx + dy;\n      if (nr >= 0 && nr < GRID_SIZE && nc >= 0 && nc < GRID_SIZE && grid[nr][nc].mine) {\n        count++;\n      }\n    });\n    return {\n      ...cell,\n      adjacent: count\n    };\n  }));\n};\nconst Minesweeper = () => {\n  _s();\n  const [grid, setGrid] = useState(generateGrid);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameWon, setGameWon] = useState(false);\n  const [time, setTime] = useState(0);\n  const [startTime, setStartTime] = useState(false);\n\n  // Timer\n  useEffect(() => {\n    let timer;\n    if (startTime && !gameOver && !gameWon) {\n      timer = setInterval(() => setTime(t => t + 1), 1000);\n    }\n    return () => clearInterval(timer);\n  }, [startTime, gameOver, gameWon]);\n\n  // Win check\n  useEffect(() => {\n    if (!gameOver) {\n      const revealedCells = grid.flat().filter(cell => cell.revealed).length;\n      const totalCells = GRID_SIZE * GRID_SIZE - MINE_COUNT;\n      if (revealedCells === totalCells) {\n        setGameWon(true);\n        setStartTime(false);\n      }\n    }\n  }, [grid, gameOver]);\n  const revealEmptyCells = (r, c, newGrid) => {\n    const directions = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n    const stack = [[r, c]];\n    while (stack.length > 0) {\n      const [x, y] = stack.pop();\n      if (x < 0 || y < 0 || x >= GRID_SIZE || y >= GRID_SIZE || newGrid[x][y].revealed || newGrid[x][y].flagged) continue;\n      newGrid[x][y].revealed = true;\n      if (newGrid[x][y].adjacent === 0) {\n        directions.forEach(([dx, dy]) => stack.push([x + dx, y + dy]));\n      }\n    }\n  };\n  const revealCell = (row, col) => {\n    if (gameOver || gameWon) return;\n    if (!startTime) setStartTime(true);\n    const clickedCell = grid[row][col];\n    if (clickedCell.flagged || clickedCell.revealed) return;\n    let newGrid = grid.map(row => row.map(cell => ({\n      ...cell\n    })));\n    if (clickedCell.mine) {\n      // Reveal all mines\n      newGrid = newGrid.map(r => r.map(cell => cell.mine ? {\n        ...cell,\n        revealed: true\n      } : cell));\n      setGrid(newGrid);\n      setGameOver(true);\n      setStartTime(false);\n      return;\n    }\n    revealEmptyCells(row, col, newGrid);\n    setGrid(newGrid);\n  };\n  const flagCell = (e, row, col) => {\n    e.preventDefault();\n    if (gameOver || gameWon) return;\n    const newGrid = grid.map(row => row.map(cell => ({\n      ...cell\n    })));\n    const cell = newGrid[row][col];\n    if (!cell.revealed) cell.flagged = !cell.flagged;\n    setGrid(newGrid);\n  };\n  const restartGame = () => {\n    setGrid(generateGrid());\n    setGameOver(false);\n    setGameWon(false);\n    setTime(0);\n    setStartTime(false);\n  };\n  const flaggedCount = grid.flat().filter(cell => cell.flagged).length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Minesweeper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Right-click to flag a cell. Click to reveal.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u23F1\\uFE0F Time: \", time, \"s | \\uD83D\\uDEA9 Placed: \", MINE_COUNT - flaggedCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u23F1\\uFE0F Time: \", time, \"s | \\uD83D\\uDEA9 Placed: \", MINE_COUNT - flaggedCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), !(gameOver || gameWon) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `cell ${cell.revealed ? \"revealed\" : \"\"} ${cell.flagged ? \"flagged\" : \"\"}`,\n          onClick: () => revealCell(rowIndex, colIndex),\n          onContextMenu: e => flagCell(e, rowIndex, colIndex),\n          children: cell.revealed ? cell.mine ? \"💣\" : cell.adjacent || \"\" : cell.flagged ? \"🚩\" : \"\"\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 17\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this), (gameOver || gameWon) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"end-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"end-text\",\n        children: gameWon ? \"🎉 You Win!\" : \"💥 Game Over!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"restart-button\",\n        onClick: restartGame,\n        children: \"\\uD83D\\uDD04 Restart Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n_s(Minesweeper, \"vUMvpx3CJSb8u12rmHvfso33hFs=\");\n_c = Minesweeper;\nexport default Minesweeper;\nvar _c;\n$RefreshReg$(_c, \"Minesweeper\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","GRID_SIZE","MINE_COUNT","generateGrid","grid","Array","fill","map","mine","revealed","flagged","adjacent","minesPlaced","row","Math","floor","random","col","calculateAdjacency","directions","rIdx","cell","cIdx","count","forEach","dx","dy","nr","nc","Minesweeper","_s","setGrid","gameOver","setGameOver","gameWon","setGameWon","time","setTime","startTime","setStartTime","timer","setInterval","t","clearInterval","revealedCells","flat","filter","length","totalCells","revealEmptyCells","r","c","newGrid","stack","x","y","pop","push","revealCell","clickedCell","flagCell","e","preventDefault","restartGame","flaggedCount","children","fileName","_jsxFileName","lineNumber","columnNumber","className","rowIndex","colIndex","onClick","onContextMenu","_c","$RefreshReg$"],"sources":["E:/Masters/Semester 2/MUI/Programming Exercise/Minesweeper/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst GRID_SIZE = 10;\r\nconst MINE_COUNT = 10;\r\n\r\nconst generateGrid = () => {\r\n  let grid = Array(GRID_SIZE)\r\n    .fill()\r\n    .map(() =>\r\n      Array(GRID_SIZE).fill({\r\n        mine: false,\r\n        revealed: false,\r\n        flagged: false,\r\n        adjacent: 0,\r\n      })\r\n    );\r\n\r\n  let minesPlaced = 0;\r\n  while (minesPlaced < MINE_COUNT) {\r\n    let row = Math.floor(Math.random() * GRID_SIZE);\r\n    let col = Math.floor(Math.random() * GRID_SIZE);\r\n    if (!grid[row][col].mine) {\r\n      grid[row][col] = { ...grid[row][col], mine: true };\r\n      minesPlaced++;\r\n    }\r\n  }\r\n\r\n  return calculateAdjacency(grid);\r\n};\r\n\r\nconst calculateAdjacency = (grid) => {\r\n  const directions = [\r\n    [-1, -1], [-1, 0], [-1, 1],\r\n    [0, -1],          [0, 1],\r\n    [1, -1], [1, 0], [1, 1],\r\n  ];\r\n\r\n  return grid.map((row, rIdx) =>\r\n    row.map((cell, cIdx) => {\r\n      if (cell.mine) return cell;\r\n\r\n      let count = 0;\r\n      directions.forEach(([dx, dy]) => {\r\n        const nr = rIdx + dx;\r\n        const nc = cIdx + dy;\r\n        if (\r\n          nr >= 0 &&\r\n          nr < GRID_SIZE &&\r\n          nc >= 0 &&\r\n          nc < GRID_SIZE &&\r\n          grid[nr][nc].mine\r\n        ) {\r\n          count++;\r\n        }\r\n      });\r\n\r\n      return { ...cell, adjacent: count };\r\n    })\r\n  );\r\n};\r\n\r\nconst Minesweeper = () => {\r\n  const [grid, setGrid] = useState(generateGrid);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [gameWon, setGameWon] = useState(false);\r\n  const [time, setTime] = useState(0);\r\n  const [startTime, setStartTime] = useState(false);\r\n\r\n  // Timer\r\n  useEffect(() => {\r\n    let timer;\r\n    if (startTime && !gameOver && !gameWon) {\r\n      timer = setInterval(() => setTime((t) => t + 1), 1000);\r\n    }\r\n    return () => clearInterval(timer);\r\n  }, [startTime, gameOver, gameWon]);\r\n\r\n  // Win check\r\n  useEffect(() => {\r\n    if (!gameOver) {\r\n      const revealedCells = grid.flat().filter((cell) => cell.revealed).length;\r\n      const totalCells = GRID_SIZE * GRID_SIZE - MINE_COUNT;\r\n      if (revealedCells === totalCells) {\r\n        setGameWon(true);\r\n        setStartTime(false);\r\n      }\r\n    }\r\n  }, [grid, gameOver]);\r\n\r\n  const revealEmptyCells = (r, c, newGrid) => {\r\n    const directions = [\r\n      [-1, -1], [-1, 0], [-1, 1],\r\n      [0, -1],          [0, 1],\r\n      [1, -1], [1, 0], [1, 1],\r\n    ];\r\n\r\n    const stack = [[r, c]];\r\n\r\n    while (stack.length > 0) {\r\n      const [x, y] = stack.pop();\r\n      if (\r\n        x < 0 ||\r\n        y < 0 ||\r\n        x >= GRID_SIZE ||\r\n        y >= GRID_SIZE ||\r\n        newGrid[x][y].revealed ||\r\n        newGrid[x][y].flagged\r\n      )\r\n        continue;\r\n\r\n      newGrid[x][y].revealed = true;\r\n\r\n      if (newGrid[x][y].adjacent === 0) {\r\n        directions.forEach(([dx, dy]) => stack.push([x + dx, y + dy]));\r\n      }\r\n    }\r\n  };\r\n\r\n  const revealCell = (row, col) => {\r\n    if (gameOver || gameWon) return;\r\n\r\n    if (!startTime) setStartTime(true);\r\n\r\n    const clickedCell = grid[row][col];\r\n    if (clickedCell.flagged || clickedCell.revealed) return;\r\n\r\n    let newGrid = grid.map((row) => row.map((cell) => ({ ...cell })));\r\n\r\n    if (clickedCell.mine) {\r\n      // Reveal all mines\r\n      newGrid = newGrid.map((r) =>\r\n        r.map((cell) => (cell.mine ? { ...cell, revealed: true } : cell))\r\n      );\r\n      setGrid(newGrid);\r\n      setGameOver(true);\r\n      setStartTime(false);\r\n      return;\r\n    }\r\n\r\n    revealEmptyCells(row, col, newGrid);\r\n    setGrid(newGrid);\r\n  };\r\n\r\n  const flagCell = (e, row, col) => {\r\n    e.preventDefault();\r\n    if (gameOver || gameWon) return;\r\n\r\n    const newGrid = grid.map((row) => row.map((cell) => ({ ...cell })));\r\n    const cell = newGrid[row][col];\r\n    if (!cell.revealed) cell.flagged = !cell.flagged;\r\n    setGrid(newGrid);\r\n  };\r\n\r\n  const restartGame = () => {\r\n    setGrid(generateGrid());\r\n    setGameOver(false);\r\n    setGameWon(false);\r\n    setTime(0);\r\n    setStartTime(false);\r\n  };\r\n\r\n  const flaggedCount = grid.flat().filter((cell) => cell.flagged).length;\r\n\r\n  return (\r\n    <div>\r\n      <h1>Minesweeper</h1>\r\n      <p>Right-click to flag a cell. Click to reveal.</p>\r\n      <p>⏱️ Time: {time}s | 🚩 Placed: {MINE_COUNT - flaggedCount}</p>\r\n      <p>⏱️ Time: {time}s | 🚩 Placed: {MINE_COUNT - flaggedCount}</p>\r\n\r\n      {/* Show grid only if game is not over/won */}\r\n      {!(gameOver || gameWon) && (\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIndex) => (\r\n            <div key={rowIndex} className=\"row\">\r\n              {row.map((cell, colIndex) => (\r\n                <div\r\n                  key={colIndex}\r\n                  className={`cell ${cell.revealed ? \"revealed\" : \"\"} ${\r\n                    cell.flagged ? \"flagged\" : \"\"\r\n                  }`}\r\n                  onClick={() => revealCell(rowIndex, colIndex)}\r\n                  onContextMenu={(e) => flagCell(e, rowIndex, colIndex)}\r\n                >\r\n                  {cell.revealed\r\n                    ? cell.mine\r\n                      ? \"💣\"\r\n                      : cell.adjacent || \"\"\r\n                    : cell.flagged\r\n                    ? \"🚩\"\r\n                    : \"\"}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* Show end message + restart */}\r\n      {(gameOver || gameWon) && (\r\n        <div className=\"end-message\">\r\n          <p className=\"end-text\">\r\n            {gameWon ? \"🎉 You Win!\" : \"💥 Game Over!\"}\r\n          </p>\r\n          <button className=\"restart-button\" onClick={restartGame}>\r\n            🔄 Restart Game\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Minesweeper;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}